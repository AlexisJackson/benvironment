#############################################################################
# Functions
#############################################################################


# open_in_atom
#
# Open a directory in atom
open_in_atom() {
  CURRENT_DIR="${PWD}"
  cd "${1}"
  atom .
  cd "${CURRENT_DIR}"
}

# dbrdp
#
# Connect to RDP On the DB through SSH Tunnel
dbrdp() {
TMP_RDP_FILE="/tmp/$$rdp.rdp"
cat << EOF > "${TMP_RDP_FILE}"
screen mode id:i:2
use multimon:i:1
session bpp:i:24
full address:s:localhost
audiomode:i:0
username:s:
disable wallpaper:i:0
disable full window drag:i:0
disable menu anims:i:0
disable themes:i:0
alternate shell:s:
shell working directory:s:
authentication level:i:2
connect to console:i:0
gatewayusagemethod:i:0
disable cursor setting:i:0
allow font smoothing:i:1
allow desktop composition:i:1
redirectprinters:i:0
prompt for credentials on client:i:0


bookmarktype:i:3
use redirection server name:i:0

authoring tool:s:rdmac
EOF
  ssh -N -L 3389:glgdb150.glgresearch.com:3389 admiral@virginia.glgresearch.com &
  sleep 3
  open "${TMP_RDP_FILE}"
  # kill $!
  # unlink "${TMP_RDP_FILE}"
}

# o
#
#  Quickly Open Things in Atom
o() {
  SOFTWARE_TO_OPEN="/tmp/.software_to_open"
  [ -n "${DIR_STARPHLEET_DEV}" ] \
    && FIND_CMD="find '${DIR_STARPHLEET_DEV}' -type d -name 'git' -maxdepth 2" \
    && eval $FIND_CMD | grep "${1}" > "${SOFTWARE_TO_OPEN}"
  [ -n "${DIR_REVERTS}" ] \
    && FIND_CMD="find '${DIR_REVERTS}' -type d -maxdepth 1" \
    && eval $FIND_CMD | grep "${1}" >> "${SOFTWARE_TO_OPEN}"
  [ -n "${DIR_STARPHLEET_DATA}" ] \
    && FIND_CMD="find '${DIR_STARPHLEET_DATA}' -type d -maxdepth 1" \
    && eval $FIND_CMD | grep "${1}" >> "${SOFTWARE_TO_OPEN}"
  [ -n "${DIR_GLG}" ] \
    && FIND_CMD="find '${DIR_GLG}' -type d -maxdepth 1" \
    && eval $FIND_CMD | grep "${1}" >> "${SOFTWARE_TO_OPEN}"
  [ -n "${DIR_CODE}" ] \
    && FIND_CMD="find '${DIR_CODE}' -type d -maxdepth 1" \
    && eval $FIND_CMD | grep "${1}" >> "${SOFTWARE_TO_OPEN}"
  [ -n "${DIR_PERSONAL}" ] \
    && FIND_CMD="find '${DIR_PERSONAL}' -type d -maxdepth 1" \
    && eval $FIND_CMD | grep "${1}" >> "${SOFTWARE_TO_OPEN}"
  SOFTWARE=$(cat "${SOFTWARE_TO_OPEN}")
  COUNT=$(cat "${SOFTWARE_TO_OPEN}" | wc -l)
  if [ "$COUNT" -eq 0 ]; then
    echo "Could not find code with that name"
    return
  fi
  if [ "$COUNT" -eq 1 ]; then
    open_in_atom "${SOFTWARE}"
    return
  else
    select selected_option in $(echo ${SOFTWARE}); do
      [ -n "${selected_option}" ] && open_in_atom "${selected_option}"
      break;
    done
    return
  fi
}

# github_purge_password
github_purge_password() {
  FILE_TO_PURGE="${1}"
  git filter-branch \
    --force \
    --index-filter "git rm --cached --ignore-unmatch ${FILE_TO_PURGE}" \
    --prune-empty \
    --tag-name-filter cat \
    -- \
    --all
}

# Find a certain mask in all epi queries
function epis_with_mask() {
  export MASK_LOOKING_FOR=${1}
  for file in $(find . -type f | grep -v '\.git'); do
    FILE_BITMASK=$(head -n +5 "${file}" | grep role | cut -f 2 -d: | tr -d ' ')
    [[ $FILE_BITMASK =~ ^-?[0-9]+$ ]] && [ $((${FILE_BITMASK} & ${MASK_LOOKING_FOR})) -gt 0 ] && echo $file \| ${FILE_BITMASK}
  done
}

export HEADQUARTERS_LOCAL="/tmp/headquarters"
# Source a file's exports but
# also cleanup known starphleet
# things
function _source_file() {

  FILE=${1}

  TMP_FILE="/tmp/$$.env.tmp"
  cat "${FILE}" \
    | grep -v "getCacheValue" \
    | grep export > "${TMP_FILE}"
  if [ -n "${OUTPUT_TO_FILE}" ]; then
    cat "${TMP_FILE}" >> /tmp/$$.stick.env
  else
    source "${TMP_FILE}"
  fi

  rm "${TMP_FILE}"
}

# Load (S)tarphleet (ENV)ironment
function senv() {
  APP=${1}

  STARPHLEET_PROD_ENV_CACHE="${HEADQUARTERS_LOCAL}"
  STARPHLEET_PROD_ENV="${STARPHLEET_PROD_ENV_CACHE}/.starphleet"
  STARPHLEET_PROD_APP_ENV="${STARPHLEET_PROD_ENV_CACHE}/${APP}/orders"

  if [ ! -d "${STARPHLEET_PROD_ENV_CACHE}" ]; then
    mkdir -p "${STARPHLEET_PROD_ENV_CACHE}"
    git clone git@github.com:glg/ec2.starphleet.headquarters.lb.git "${STARPHLEET_PROD_ENV_CACHE}"
  fi

  if [ -f "${STARPHLEET_PROD_ENV}" ]; then
    _source_file "${STARPHLEET_PROD_ENV}"
    echo "${STARPHLEET_PROD_ENV} loaded"
  fi

  if [ -f "${STARPHLEET_PROD_APP_ENV}" ]; then
    echo "${STARPHLEET_PROD_APP_ENV} loaded"
    _source_file "${STARPHLEET_PROD_APP_ENV}"
  fi
}

# Instead of source all the envs
# drop them in an .env file instead
function envit() {
  OUTPUT_TO_FILE=true
  envme $*
  mv /tmp/$$.stick.env ./environment
}

# Grab all the environment exports
# from the starphleet environment
# for local dev
function envme() {
  APP=${1}

  DEV_ENV="${HOME}/starphleet_dev/.starphleet"
  DEV_APP_ENV="${HOME}/starphleet_dev/${APP}/orders"
  LOCAL_OVERRIDES="${HOME}/.devenv"

  # Load Starphleet ENV
  senv "${APP}"

  # Load Devmode ENV and override Production with local
  if [ -f "${DEV_ENV}" ]; then
    _source_file "${DEV_ENV}"
    echo "${DEV_ENV} loaded"
  fi

  if [ -f "${DEV_APP_ENV}" ]; then
    _source_file "${DEV_APP_ENV}"
    echo "${DEV_APP_ENV} orders file loaded..."
  fi

  # And finally, override with "denv" environment
  if [ -f "${LOCAL_OVERRIDES}" ]; then
    _source_file "${LOCAL_OVERRIDES}"
    echo "${LOCAL_OVERRIDES} orders file loaded..."
  fi
}

# sfd
#
#  loop through each directory in the starphleet_dev dir and check for a .git dir
#  and if it is a git repo, open these as unique roots in a single atom window
sfd() {
  cd ${DIR_STARPHLEET_DEV}
  LIST=""
  for dir in $(find ${DIR_STARPHLEET_DEV} -type d -maxdepth 1); do
    [ -d "$dir/.git" ] && LIST="${LIST} ${dir}"
  done
  echo Opening ${LIST}
  # Expand the ${LIST} before running the command with eval
  eval atom ${LIST}
}

# sfhq
#
#  loop through each directory in the starphleet hq dir and check for a .git dir
#  and if it is a git repo, open these as unique roots in a single atom window
sfhq() {
  cd ${HOME}/Dropbox/code/glg/sfhq
  LIST=""
  for dir in $(find ${HOME}/Dropbox/code/glg/sfhq -type d -maxdepth 1); do
    [ -d "$dir/.git" ] && LIST="${LIST} ${dir}"
  done
  echo Opening ${LIST}
  # Expand the ${LIST} before running the command with eval
  eval atom ${LIST}
}

# iphb
#
#  loop through each directory in the iphb hq dir and check for a .git dir
#  and if it is a git repo, open these as unique roots in a single atom window
iphb() {
  cd ${HOME}/Dropbox/code
  LIST=""
  for dir in $(ls -d iphb-*); do
    [ -d "$dir/.git" ] && LIST="${LIST} ${dir}"
  done
  echo Opening ${LIST}
  # Expand the ${LIST} before running the command with eval
  eval atom ${LIST}
}

# app
#
#  Open a URL in APP Mode in Chrome
#  If anything is not checked in yet
app() {
  '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --kiosk --app="$1"
}

# csd
#
#  loop through each directory in the starphleet dev dir and check
#  If anything is not checked in yet
csd() {
  CURRENT_DIR=${PWD}
  for dir in $(find ${DIR_STARPHLEET_DEV} -type d -name "git" -maxdepth 2)
  do
    echo "$dir"
    cd $dir
    [ -d "./.git" ] && git status -s
  done
  for dir in $(find ${HOME}/starphleet_data -type d -maxdepth 1)
  do
    echo "$dir"
    cd $dir
    [ -d "./.git" ] && git status -s
  done
  cd ${CURRENT_DIR}
}

# ccd
#
#  loop through each directory in the current dir and check
#  If anything is not checked in yet
ccd() {
  CURRENT_DIR=${PWD}
  for dir in $(find ${PWD} -type d -name ".git" -maxdepth 2)
  do
    CHANGE_TO=$(dirname "${dir}")
    echo "$CHANGE_TO"
    cd $CHANGE_TO
    [ -d "./.git" ] && git status -s
  done
  cd ${CURRENT_DIR}
}

# gsab - Git Search All Branches
#
# Search all branches for a term
# gsab() {
#   SEARCH_FOR="${1}"
#
#   git grep "${SEARCH_FOR}" $(git rev-list --all) |
# }

# Wait for Container - Copyright 2016 (c) Ian Groff
#
# Sit tight and wait for a container to come online
wfc() {
  unset VERSION_SHA
  unset URL
  git status && VERSION_SHA=$(git log | head -n 1 | awk '{print $2}' | cut -c -7) || $2
  [ -d "./.git" ] && URL="https://services.glgresearch.com/$(basename ${PWD})" || $1
  URL=${URL?You must provide a starphleet url to check for a version}
  VERSION_SHA=${VERSION_SHA?you must provide a sha to wait for}
  if curl --head -s "${URL}" | grep ${VERSION_SHA}; then
    echo "Version ${VERSION_SHA} appears live"
    MSG="display notification \"${URL}\" with title \"LIVE!\""
    osascript -e "${MSG}"
  else
    echo "Version not found, checking again"
    sleep 1
    exec $0 "$@"
  fi
}

# Create a default git ignore
#
gi() {
cat << EOF > ./.gitignore
# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so
.env

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
runme
test
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
node_modules
EOF
}

# Create JSBeautify Config
#
#  Create a ESLint Configuration file in the current directory
jsb() {
cat << EOF > ./.jsbeautifyrc
{
  "brace_style": "collapse,preserve-inline",
  "object_curly_spacing": false,
  "preserve_newlines": true,
  "remove_trailing_whitespace": true,
  "space_in_empty_paren": false,
  "space_after_anon_function": false,
  "space_before_conditional": true,
  "space_in_paren": false,
  "unescape_strings": false,
  "wrap_line_length": 0,
  "multiline_ternary": "never",
  "max_preserve_newlines": 10,
  "keep_array_indentation": false,
  "jsx_brackets": false,
  "jslint_happy": false,
  "indent_style": "space",
  "indent_size": 2,
  "indent_level": 0,
  "indent_comments": false,
  "indent_char": " ",
  "indent_chained_methods": true,
  "end_with_semicolon": true,
  "keep_function_indentation": false,
  "end_with_newline": true,
  "end_with_comma": false,
  "operator_position": "after-newline",
  "comma_first": false,
  "break_chained_methods": false,
  "arrow_parens": "as-needed",
  "align_assignments": true
}
EOF
}

# Create an ESLINT Config
#
#  Create a ESLint Configuration file in the current directory
ei() {
cat << EOF > ./.eslintrc.json
{
  "env": {
    "es6": true,
    "node": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "sourceType": "module",
    "ecmaVersion": 2017
  },
  "rules": {
    "accessor-pairs": "error",
    "array-bracket-spacing": [
      "error",
      "never"
    ],
    "array-callback-return": "error",
    "arrow-body-style": [
      "error",
      "as-needed"
    ],
    "arrow-parens": "off",
    "arrow-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "block-scoped-var": "error",
    "block-spacing": "error",
    "brace-style": [
      "error",
      "1tbs"
    ],
    "callback-return": "error",
    "camelcase": [
      "error",
      {
        "properties": "never"
      }
    ],
    "comma-spacing": [
      "error",
      {
        "after": true,
        "before": false
      }
    ],
    "comma-style": [
      "error",
      "last"
    ],
    "complexity": "error",
    "computed-property-spacing": [
      "error",
      "never"
    ],
    "consistent-return": "off",
    "consistent-this": "error",
    "curly": "error",
    "default-case": "error",
    "dot-location": [
      "error",
      "property"
    ],
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "eol-last": "error",
    "eqeqeq": "error",
    "func-names": "off",
    "func-style": "off",
    "generator-star-spacing": "error",
    "global-require": "error",
    "guard-for-in": "off",
    "handle-callback-err": "error",
    "id-blacklist": "error",
    "id-length": "off",
    "id-match": "error",
    "indent": "off",
    "init-declarations": "off",
    "jsx-quotes": "error",
    "key-spacing": "error",
    "keyword-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "linebreak-style": [
      "error",
      "unix"
    ],
    "lines-around-comment": "off",
    "max-depth": "error",
    "max-len": "off",
    "max-nested-callbacks": "error",
    "max-params": "error",
    "max-statements": "off",
    "max-statements-per-line": "error",
    "new-cap": "error",
    "new-parens": "error",
    "newline-after-var": "off",
    "newline-before-return": "off",
    "newline-per-chained-call": "off",
    "no-alert": "error",
    "no-array-constructor": "error",
    "no-bitwise": "off",
    "no-caller": "error",
    "no-catch-shadow": "error",
    "no-confusing-arrow": "off",
    "no-continue": "error",
    "no-div-regex": "error",
    "no-duplicate-imports": "error",
    "no-else-return": "error",
    "no-empty-function": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-extra-parens": "error",
    "no-floating-decimal": "error",
    "no-implicit-coercion": "off",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-inline-comments": "off",
    "no-inner-declarations": [
      "error",
      "functions"
    ],
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-lonely-if": "error",
    "no-loop-func": "error",
    "no-magic-numbers": "off",
    "no-mixed-requires": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": "error",
    "no-native-reassign": "error",
    "no-negated-condition": "error",
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-require": "error",
    "no-new-wrappers": "error",
    "no-octal-escape": "error",
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],
    "no-path-concat": "error",
    "no-plusplus": "off",
    "no-process-env": "error",
    "no-process-exit": "off",
    "no-proto": "error",
    "no-restricted-globals": "error",
    "no-restricted-imports": "error",
    "no-restricted-modules": "error",
    "no-restricted-syntax": "error",
    "no-return-assign": "error",
    "no-script-url": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow": "off",
    "no-shadow-restricted-names": "error",
    "no-spaced-func": "error",
    "no-sync": "off",
    "no-ternary": "off",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-undefined": "off",
    "no-underscore-dangle": "off",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": "error",
    "no-unused-expressions": "error",
    "no-use-before-define": "off",
    "no-useless-call": "error",
    "no-useless-concat": "off",
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-var": "off",
    "no-void": "error",
    "no-warning-comments": "off",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "object-curly-spacing": ["error", "always"],
    "object-shorthand": "off",
    "one-var": "off",
    "one-var-declaration-per-line": "error",
    "operator-assignment": [
      "error",
      "always"
    ],
    "operator-linebreak": "error",
    "padded-blocks": "off",
    "prefer-arrow-callback": "off",
    "prefer-const": "off",
    "prefer-reflect": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "off",
    "quote-props": "off",
    "quotes": "off",
    "radix": "error",
    "require-jsdoc": "off",
    "require-yield": "error",
    "semi": "error",
    "semi-spacing": "error",
    "sort-imports": "error",
    "sort-vars": "error",
    "space-before-blocks": "error",
    "space-before-function-paren": "off",
    "space-in-parens": [
      "error",
      "never"
    ],
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": "off",
    "strict": "off",
    "template-curly-spacing": "error",
    "valid-jsdoc": "off",
    "vars-on-top": "off",
    "wrap-iife": "error",
    "wrap-regex": "error",
    "yield-star-spacing": "error",
    "yoda": [
      "error",
      "never"
    ]
  }
}
EOF
}

net() {
  while [ 1 ]; do
    if ping -c 1 8.8.8.8; then
      anybar_good 5999
    else
      anybar_bad 5999
    fi
    if ping -c 1 services-internal.glgresearch.com; then
      anybar_good 6999
    else
      anybar_bad 6999
    fi
    sleep 10
  done
}

admin() {
  ssh -i "${HOME}/Dropbox/starphleet.pem" "ubuntu@${1}"
}

hack_root() {
  HOST="${1}"
  ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "admiral@${HOST}" "sudo bash -c '[ ! -f /root/.ssh/.authorized_keys.org ] && cp /root/.ssh/authorized_keys /root/.ssh/.authorized_keys.org || true'"
  ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "admiral@${HOST}" "sudo cp '/root/.ssh/.authorized_keys.org' '/root/.ssh/authorized_keys'"
  ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "admiral@${HOST}" "cat /home/admiral/.ssh/authorized_keys | sudo tee -a /root/.ssh/authorized_keys"
}

ds () {
  rsync -ravP /Users/benjamin/reverts/starphleet/ root@benjaminhudgens.glgresearch.com:/starphleet/
  ssh root@benjaminhudgens.glgresearch.com "cd /starphleet/provision; ./patch"
}

# Move my copy function from .zshrc
c () {
  cat $1 | pbcopy
}

##########################################################
# Usage:    connect_to_all_machines [$clusterName]
# Example:  connect_to_all_machines [virginia]
##########################################################
# Set to admiral or captain
USER_TYPE="admiral"
function connect_to_all_machines() {
  # TODO: This could be smarter - right now, we just assume
  #       we will be the only tmux window/session.  If one
  #       already exists we will break
  if tmux list-sessions; then
    echo This only works if no Tmux sessions exist
    return
  fi

  if [ "$#" -gt 1 ]; then
    MACHINES=$@
  else
    CLUSTER_NAME="${1:-virginia}"
    [ "${CLUSTER_NAME}" = "virginia" ] && MACHINE_URL="http://eephleet-internal.glgresearch.com/forkulator/primary-phleet-instances-virginia"
    [ "${CLUSTER_NAME}" = "moserca" ] && MACHINE_URL="http://eephleet-internal.glgresearch.com/forkulator/moserca-phleet-instances"
    MACHINES=$(curl -s "${MACHINE_URL}" | grep PrivateIpAddress | cut -f 4 -d '"')
  fi

  CLUSTER_NAME=${CLUSTER_NAME:-virginia}
  tmux new-session -d
  PANE_ID=0
  SESSION=0
  window=${SESSION}:0


  for machine in $(echo $MACHINES); do
    [ $PANE_ID -gt 0 ] && tmux split-window
    [ $PANE_ID -gt 0 ] && tmux select-layout even-vertical
    pane=${window}.$((PANE_ID++))
    tmux send-keys -t "$pane" "ssh ${USER_TYPE}@${machine}" Enter
    tmux send-keys -t "$pane" "clear" Enter
  done
  tmux setw sync
  tmux attach-session -t "$SESSION"
}


devdb () {
  curl -s "${DEVDB_INFO_URL}${1}" | jq
}
